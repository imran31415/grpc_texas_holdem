syntax = "proto3";

package poker;

import "google/protobuf/empty.proto";

service Poker {

    // Player RPCs
    rpc CreatePlayer(Player) returns (Player){}
    rpc CreatePlayers(Players) returns (Players){}
    rpc DeletePlayers(Players) returns (google.protobuf.Empty){}
    rpc GetPlayer(Player) returns (Player){}
    rpc GetPlayersByName(Players) returns(Players){}
    rpc UpdatePlayersChips(Players) returns(Players){}
    rpc UpdatePlayersCards(Players) returns(Players){}
    rpc SetPlayerSlot(Player) returns (Player){}

    // Game RPCs
    rpc CreateGame(Game) returns (Game){}
    rpc GetGameByName(Game) returns (Game){}
    rpc GetGame(Game) returns (Game){}
    rpc DeleteGames(Games) returns (google.protobuf.Empty){}
    rpc AllocateGameSlots(Game) returns (Game){}
    rpc SetButtonPositions(Game) returns (Game){}
    rpc SetMin(Game) returns (Game){}
    rpc ValidatePreGame(Game) returns (Game){}
    rpc NextDealer(Game) returns (Game){}
    rpc UpdateGameInRound(Game) returns (Game){}


    // GamePlayers (join table)
    rpc GetGamePlayersByGameId(Game) returns (Players){}
    rpc SetGamePlayers(Game) returns (Players){}
    rpc RemovePlayerFromGame(Player) returns(google.protobuf.Empty) {}


    // RoundPlayers RPCs (join table)
    rpc GetRoundPlayersByRoundId(Round) returns (Players){}
    rpc CreateRoundPlayers(Round) returns (Round){}

    // Round RPCs
    rpc CreateRoundFromGame(Game) returns (Round){}
    rpc GetRound(Round) returns (Round){}
    rpc ValidatePreRound(Round) returns (Round){}
    rpc StartRound(Round) returns (Round){}
    rpc DealCards(Round) returns (Round){}
    rpc UpdateDeck(Round) returns (Round){}
    rpc DealFlop(Round) returns (Round){}
    rpc DealRiver(Round) returns (Round){}
    rpc DealTurn(Round) returns (Round){}
    rpc CreateDeck(Round) returns (Round){}
    rpc SetAction(Round) returns (Round){}
    rpc SetNextOnBet(Round) returns (Round){}
    rpc SetNextRound(Round) returns (Round){}
    rpc UpdateRoundFlop(Round) returns (Round){}
    rpc UpdateRoundRiver(Round) returns (Round){}
    rpc UpdateRoundTurn(Round) returns (Round){}
    rpc GetRoundBets(Round) returns (Bets){}
    rpc GetRoundBetsForStatus(Round) returns (Bets){}
    rpc MakeBet(Bet) returns (Round){}
    rpc GetPlayerOnBet(Round) returns (Player){}
    rpc UpdatePlayerNotinHand(Player) returns(Player) {}
    rpc GetAmountToCallForPlayer(AmountToCall) returns (AmountToCall) {}
    rpc IsBettingOver(AmountToCall) returns (AmountToCall) {}

}

// convenience method, not saved in db
message AmountToCall {
    Player player = 1;
    Round round = 2;
    int64 chips = 3;
    bool betting_over = 4;
}

message Player {
    int64 id = 1;
    string name = 2;
    int64 chips = 3;
    // What seat at the table they are at 1-8 only
    int64 slot = 4;
    // Whether they are in a hand
    bool in_hand = 5;
    string cards = 6;
}

message Players {
    repeated Player players= 1;
}

message Game {

     Players players = 1;
     string name = 2;
     // button positions
     int64 id = 3;
     int64 dealer = 4;
     int64 min = 5;
     Rounds rounds = 6;
     bool in_round = 7;
}

message Games {
    repeated Game games = 1;
}

// any info here is only relevant within a particular hand
message Round {
    int64 id = 1;
    RoundStatus status = 2;
    Players players = 3;
    string deck = 4;
    string flop = 5;
    string turn = 6;
    string river = 7;
    Bets bets = 8;
    int64 game = 9;
    // Slot of person who has to bet
    int64 action = 10;
}

message Rounds {
    repeated Round rounds = 1;
}

enum RoundStatus {
    NOT_STARTED = 0; // No betting
    PRE_FLOP = 1;    // first round of betting is happening
    FLOP = 2;        // second round of betting
    RIVER = 3;       // third round of betting
    TURN = 4;        // final round of betting
    SHOW = 5;        // All bets are closed and we show any hands remaining
    OVER = 6;        // Winner has been determined and chips have been disbursed
}

message Bet{
    int64 id = 1;
    RoundStatus status = 2;
    int64 round = 3;
    int64 game = 4;
    int64 player = 5;
    int64 chips = 6;
    enum BetType {
        NONE = 0;
        FOLD = 1;
        CALL = 2;
        RAISE = 3;
        SMALL = 4;
        BIG   = 5;
    }
    BetType type = 7;
}

message Bets {
    repeated Bet bets = 1;
}