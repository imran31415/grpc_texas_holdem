syntax = "proto3";

package poker;

import "google/protobuf/empty.proto";

service Poker {
    rpc CreatePlayer(Player) returns (Player){}
    rpc CreatePlayers(Players) returns (Players){}
    rpc DeletePlayers(Players) returns (google.protobuf.Empty){}
    rpc GetPlayer(Player) returns (Player){}
    rpc CreateGame(Game) returns (Game){}
    rpc GetGame(Game) returns (Game){}
    rpc DeleteGames(Games) returns (google.protobuf.Empty){}
    rpc GetGamePlayersByGameId(Game) returns (Players){}
    rpc GetGameByName(Game) returns (Game){}
    rpc SetGamePlayers(Game) returns (Players){}
    rpc GetPlayersByName(Players) returns(Players){}
    rpc SetPlayerSlot(Player) returns (Player){}
    rpc AllocateGameSlots(Game) returns (Game){}
    rpc SetButtonPositions(Game) returns (Game){}
    rpc ValidatePreGame(Game) returns (Game){}
    rpc NextDealer(Game) returns (Game){}
}


message Player {
    int64 id = 1;
    string name = 2;
    int64 chips = 3;
    // What seat at the table they are at 1-8 only
    int64 slot = 4;
    // Whether they are in a hand
    bool in_hand = 5;
    string cards = 6;
}

message Players {
    repeated Player players= 1;
}

message Game {

     Players players = 1;
     string name = 2;
     // button positions
     int64 id = 3;
     int64 dealer = 4;
     int64 min = 5;
     Rounds rounds = 6;
}

message Games {
    repeated Game games = 1;
}

// any info here is only relevant within a particular hand
message Round {
    enum Status {
        NOT_STARTED = 0; // No betting
        PRE_FLOP = 1;    // first round of betting is happening
        FLOP = 2;        // second round of betting
        RIVER = 3;       // third round of betting
        TURN = 4;        // final round of betting
        SHOW = 5;        // All bets are closed and we show any hands remaining
        OVER = 6;        // Winner has been determined and chips have been disbursed
    }
    Status status = 1;

    Players players = 2;
    string deck = 3;
    string flop = 4;
    string turn = 5;
    string river = 6;
    Bets bets = 7;
}

message Rounds {
    repeated Round rounds = 1;
}

message Bet{
    enum Status {
        NOT_STARTED = 0; // No betting
        PRE_FLOP = 1;    // first round of betting is happening
        FLOP = 2;        // second round of betting
        RIVER = 3;       // third round of betting
        TURN = 4;        // final round of betting
        SHOW = 5;        // All bets are closed and we show any hands remaining
        OVER = 6;        // Winner has been determined and chips have been disbursed
    }
    Status status = 1;
    int64 round = 2;
    int64 game = 3;
    int64 player = 4;
    int64 chips = 5;
    enum BetType {
        NONE = 0;
        FOLD = 1;
        CALL = 2;
        RAISE = 3;
    }
    BetType type = 6;
}

message Bets {
    repeated Bet bets = 1;
}