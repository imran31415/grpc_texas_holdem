// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protobufs/poker.proto

package poker

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Card_Suit int32

const (
	Card_UNKNOWN_SUIT Card_Suit = 0
	Card_HEARTS       Card_Suit = 1
	Card_DIAMONDS     Card_Suit = 2
	Card_CLUBS        Card_Suit = 3
	Card_SPADES       Card_Suit = 4
)

var Card_Suit_name = map[int32]string{
	0: "UNKNOWN_SUIT",
	1: "HEARTS",
	2: "DIAMONDS",
	3: "CLUBS",
	4: "SPADES",
}

var Card_Suit_value = map[string]int32{
	"UNKNOWN_SUIT": 0,
	"HEARTS":       1,
	"DIAMONDS":     2,
	"CLUBS":        3,
	"SPADES":       4,
}

func (x Card_Suit) String() string {
	return proto.EnumName(Card_Suit_name, int32(x))
}

func (Card_Suit) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_818c499f6358623d, []int{0, 0}
}

type Card_Rank int32

const (
	Card_UNKNOWN_RANK Card_Rank = 0
	Card_ACE          Card_Rank = 1
	Card_TWO          Card_Rank = 2
	Card_THREE        Card_Rank = 3
	Card_FOUR         Card_Rank = 4
	Card_FIVE         Card_Rank = 5
	Card_SIX          Card_Rank = 6
	Card_SEVEN        Card_Rank = 7
	Card_EIGHT        Card_Rank = 8
	Card_NINE         Card_Rank = 9
	Card_TEN          Card_Rank = 10
	Card_JACK         Card_Rank = 11
	Card_QUEEN        Card_Rank = 12
	Card_KING         Card_Rank = 13
)

var Card_Rank_name = map[int32]string{
	0:  "UNKNOWN_RANK",
	1:  "ACE",
	2:  "TWO",
	3:  "THREE",
	4:  "FOUR",
	5:  "FIVE",
	6:  "SIX",
	7:  "SEVEN",
	8:  "EIGHT",
	9:  "NINE",
	10: "TEN",
	11: "JACK",
	12: "QUEEN",
	13: "KING",
}

var Card_Rank_value = map[string]int32{
	"UNKNOWN_RANK": 0,
	"ACE":          1,
	"TWO":          2,
	"THREE":        3,
	"FOUR":         4,
	"FIVE":         5,
	"SIX":          6,
	"SEVEN":        7,
	"EIGHT":        8,
	"NINE":         9,
	"TEN":          10,
	"JACK":         11,
	"QUEEN":        12,
	"KING":         13,
}

func (x Card_Rank) String() string {
	return proto.EnumName(Card_Rank_name, int32(x))
}

func (Card_Rank) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_818c499f6358623d, []int{0, 1}
}

type Card struct {
	Suit                 Card_Suit `protobuf:"varint,1,opt,name=suit,proto3,enum=poker.Card_Suit" json:"suit,omitempty"`
	Rank                 Card_Rank `protobuf:"varint,2,opt,name=rank,proto3,enum=poker.Card_Rank" json:"rank,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Card) Reset()         { *m = Card{} }
func (m *Card) String() string { return proto.CompactTextString(m) }
func (*Card) ProtoMessage()    {}
func (*Card) Descriptor() ([]byte, []int) {
	return fileDescriptor_818c499f6358623d, []int{0}
}

func (m *Card) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Card.Unmarshal(m, b)
}
func (m *Card) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Card.Marshal(b, m, deterministic)
}
func (m *Card) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Card.Merge(m, src)
}
func (m *Card) XXX_Size() int {
	return xxx_messageInfo_Card.Size(m)
}
func (m *Card) XXX_DiscardUnknown() {
	xxx_messageInfo_Card.DiscardUnknown(m)
}

var xxx_messageInfo_Card proto.InternalMessageInfo

func (m *Card) GetSuit() Card_Suit {
	if m != nil {
		return m.Suit
	}
	return Card_UNKNOWN_SUIT
}

func (m *Card) GetRank() Card_Rank {
	if m != nil {
		return m.Rank
	}
	return Card_UNKNOWN_RANK
}

type Deck struct {
	Cards                []*Card  `protobuf:"bytes,1,rep,name=cards,proto3" json:"cards,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Deck) Reset()         { *m = Deck{} }
func (m *Deck) String() string { return proto.CompactTextString(m) }
func (*Deck) ProtoMessage()    {}
func (*Deck) Descriptor() ([]byte, []int) {
	return fileDescriptor_818c499f6358623d, []int{1}
}

func (m *Deck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deck.Unmarshal(m, b)
}
func (m *Deck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deck.Marshal(b, m, deterministic)
}
func (m *Deck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deck.Merge(m, src)
}
func (m *Deck) XXX_Size() int {
	return xxx_messageInfo_Deck.Size(m)
}
func (m *Deck) XXX_DiscardUnknown() {
	xxx_messageInfo_Deck.DiscardUnknown(m)
}

var xxx_messageInfo_Deck proto.InternalMessageInfo

func (m *Deck) GetCards() []*Card {
	if m != nil {
		return m.Cards
	}
	return nil
}

type Player struct {
	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Chips int64  `protobuf:"varint,3,opt,name=chips,proto3" json:"chips,omitempty"`
	Hand  *Hand  `protobuf:"bytes,4,opt,name=hand,proto3" json:"hand,omitempty"`
	// What seat at the table they are at 1-8 only
	Slot                 int64    `protobuf:"varint,5,opt,name=slot,proto3" json:"slot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Player) Reset()         { *m = Player{} }
func (m *Player) String() string { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()    {}
func (*Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_818c499f6358623d, []int{2}
}

func (m *Player) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Player.Unmarshal(m, b)
}
func (m *Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Player.Marshal(b, m, deterministic)
}
func (m *Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player.Merge(m, src)
}
func (m *Player) XXX_Size() int {
	return xxx_messageInfo_Player.Size(m)
}
func (m *Player) XXX_DiscardUnknown() {
	xxx_messageInfo_Player.DiscardUnknown(m)
}

var xxx_messageInfo_Player proto.InternalMessageInfo

func (m *Player) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Player) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Player) GetChips() int64 {
	if m != nil {
		return m.Chips
	}
	return 0
}

func (m *Player) GetHand() *Hand {
	if m != nil {
		return m.Hand
	}
	return nil
}

func (m *Player) GetSlot() int64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

type Players struct {
	Players              []*Player `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Players) Reset()         { *m = Players{} }
func (m *Players) String() string { return proto.CompactTextString(m) }
func (*Players) ProtoMessage()    {}
func (*Players) Descriptor() ([]byte, []int) {
	return fileDescriptor_818c499f6358623d, []int{3}
}

func (m *Players) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Players.Unmarshal(m, b)
}
func (m *Players) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Players.Marshal(b, m, deterministic)
}
func (m *Players) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Players.Merge(m, src)
}
func (m *Players) XXX_Size() int {
	return xxx_messageInfo_Players.Size(m)
}
func (m *Players) XXX_DiscardUnknown() {
	xxx_messageInfo_Players.DiscardUnknown(m)
}

var xxx_messageInfo_Players proto.InternalMessageInfo

func (m *Players) GetPlayers() []*Player {
	if m != nil {
		return m.Players
	}
	return nil
}

type Hand struct {
	One                  *Card    `protobuf:"bytes,1,opt,name=one,proto3" json:"one,omitempty"`
	Two                  *Card    `protobuf:"bytes,2,opt,name=two,proto3" json:"two,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Hand) Reset()         { *m = Hand{} }
func (m *Hand) String() string { return proto.CompactTextString(m) }
func (*Hand) ProtoMessage()    {}
func (*Hand) Descriptor() ([]byte, []int) {
	return fileDescriptor_818c499f6358623d, []int{4}
}

func (m *Hand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Hand.Unmarshal(m, b)
}
func (m *Hand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Hand.Marshal(b, m, deterministic)
}
func (m *Hand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hand.Merge(m, src)
}
func (m *Hand) XXX_Size() int {
	return xxx_messageInfo_Hand.Size(m)
}
func (m *Hand) XXX_DiscardUnknown() {
	xxx_messageInfo_Hand.DiscardUnknown(m)
}

var xxx_messageInfo_Hand proto.InternalMessageInfo

func (m *Hand) GetOne() *Card {
	if m != nil {
		return m.One
	}
	return nil
}

func (m *Hand) GetTwo() *Card {
	if m != nil {
		return m.Two
	}
	return nil
}

type Flop struct {
	One                  *Card    `protobuf:"bytes,1,opt,name=one,proto3" json:"one,omitempty"`
	Two                  *Card    `protobuf:"bytes,2,opt,name=two,proto3" json:"two,omitempty"`
	Three                *Card    `protobuf:"bytes,3,opt,name=three,proto3" json:"three,omitempty"`
	Four                 *Card    `protobuf:"bytes,4,opt,name=four,proto3" json:"four,omitempty"`
	Five                 *Card    `protobuf:"bytes,5,opt,name=five,proto3" json:"five,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Flop) Reset()         { *m = Flop{} }
func (m *Flop) String() string { return proto.CompactTextString(m) }
func (*Flop) ProtoMessage()    {}
func (*Flop) Descriptor() ([]byte, []int) {
	return fileDescriptor_818c499f6358623d, []int{5}
}

func (m *Flop) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Flop.Unmarshal(m, b)
}
func (m *Flop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Flop.Marshal(b, m, deterministic)
}
func (m *Flop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flop.Merge(m, src)
}
func (m *Flop) XXX_Size() int {
	return xxx_messageInfo_Flop.Size(m)
}
func (m *Flop) XXX_DiscardUnknown() {
	xxx_messageInfo_Flop.DiscardUnknown(m)
}

var xxx_messageInfo_Flop proto.InternalMessageInfo

func (m *Flop) GetOne() *Card {
	if m != nil {
		return m.One
	}
	return nil
}

func (m *Flop) GetTwo() *Card {
	if m != nil {
		return m.Two
	}
	return nil
}

func (m *Flop) GetThree() *Card {
	if m != nil {
		return m.Three
	}
	return nil
}

func (m *Flop) GetFour() *Card {
	if m != nil {
		return m.Four
	}
	return nil
}

func (m *Flop) GetFive() *Card {
	if m != nil {
		return m.Five
	}
	return nil
}

type Game struct {
	Players *Players `protobuf:"bytes,1,opt,name=players,proto3" json:"players,omitempty"`
	Name    string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// button positions
	Id                   int64    `protobuf:"varint,9,opt,name=id,proto3" json:"id,omitempty"`
	Small                int64    `protobuf:"varint,10,opt,name=small,proto3" json:"small,omitempty"`
	Big                  int64    `protobuf:"varint,11,opt,name=big,proto3" json:"big,omitempty"`
	Dealer               int64    `protobuf:"varint,12,opt,name=dealer,proto3" json:"dealer,omitempty"`
	Deck                 []*Card  `protobuf:"bytes,13,rep,name=deck,proto3" json:"deck,omitempty"`
	Flop                 *Flop    `protobuf:"bytes,15,opt,name=flop,proto3" json:"flop,omitempty"`
	Min                  int64    `protobuf:"varint,16,opt,name=min,proto3" json:"min,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Game) Reset()         { *m = Game{} }
func (m *Game) String() string { return proto.CompactTextString(m) }
func (*Game) ProtoMessage()    {}
func (*Game) Descriptor() ([]byte, []int) {
	return fileDescriptor_818c499f6358623d, []int{6}
}

func (m *Game) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Game.Unmarshal(m, b)
}
func (m *Game) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Game.Marshal(b, m, deterministic)
}
func (m *Game) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Game.Merge(m, src)
}
func (m *Game) XXX_Size() int {
	return xxx_messageInfo_Game.Size(m)
}
func (m *Game) XXX_DiscardUnknown() {
	xxx_messageInfo_Game.DiscardUnknown(m)
}

var xxx_messageInfo_Game proto.InternalMessageInfo

func (m *Game) GetPlayers() *Players {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *Game) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Game) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Game) GetSmall() int64 {
	if m != nil {
		return m.Small
	}
	return 0
}

func (m *Game) GetBig() int64 {
	if m != nil {
		return m.Big
	}
	return 0
}

func (m *Game) GetDealer() int64 {
	if m != nil {
		return m.Dealer
	}
	return 0
}

func (m *Game) GetDeck() []*Card {
	if m != nil {
		return m.Deck
	}
	return nil
}

func (m *Game) GetFlop() *Flop {
	if m != nil {
		return m.Flop
	}
	return nil
}

func (m *Game) GetMin() int64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func init() {
	proto.RegisterEnum("poker.Card_Suit", Card_Suit_name, Card_Suit_value)
	proto.RegisterEnum("poker.Card_Rank", Card_Rank_name, Card_Rank_value)
	proto.RegisterType((*Card)(nil), "poker.Card")
	proto.RegisterType((*Deck)(nil), "poker.Deck")
	proto.RegisterType((*Player)(nil), "poker.Player")
	proto.RegisterType((*Players)(nil), "poker.Players")
	proto.RegisterType((*Hand)(nil), "poker.Hand")
	proto.RegisterType((*Flop)(nil), "poker.Flop")
	proto.RegisterType((*Game)(nil), "poker.Game")
}

func init() { proto.RegisterFile("protobufs/poker.proto", fileDescriptor_818c499f6358623d) }

var fileDescriptor_818c499f6358623d = []byte{
	// 748 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0x5b, 0x6e, 0xd3, 0x40,
	0x14, 0x86, 0xe3, 0xd8, 0x4e, 0x9a, 0x93, 0x4b, 0x87, 0x51, 0xa9, 0xac, 0x4a, 0x88, 0x62, 0x81,
	0x08, 0x02, 0xa5, 0x10, 0x90, 0x78, 0xce, 0xc5, 0x4d, 0x4c, 0xc0, 0x09, 0x76, 0xd2, 0xf2, 0x86,
	0xdc, 0x78, 0x4a, 0xad, 0x38, 0x9e, 0xc8, 0x9e, 0xb4, 0xea, 0x56, 0xd8, 0x01, 0x5b, 0x60, 0x1d,
	0x2c, 0x82, 0x65, 0xa0, 0x19, 0xbb, 0x51, 0x2e, 0x25, 0x41, 0xe2, 0xed, 0x9c, 0xf9, 0xff, 0x73,
	0x99, 0x6f, 0x2c, 0x19, 0x1e, 0xce, 0x22, 0xca, 0xe8, 0xc5, 0xfc, 0x32, 0x3e, 0x99, 0xd1, 0x09,
	0x89, 0x6a, 0x22, 0xc7, 0xaa, 0x48, 0xf4, 0x9f, 0x59, 0x50, 0x5a, 0x6e, 0xe4, 0xe1, 0xa7, 0xa0,
	0xc4, 0x73, 0x9f, 0x69, 0xd2, 0xb1, 0x54, 0xad, 0xd4, 0x51, 0x2d, 0xf1, 0x72, 0xa9, 0xe6, 0xcc,
	0x7d, 0x66, 0x0b, 0x95, 0xbb, 0x22, 0x37, 0x9c, 0x68, 0xd9, 0x4d, 0x97, 0xed, 0x86, 0x13, 0x5b,
	0xa8, 0xba, 0x09, 0x0a, 0xaf, 0xc1, 0x08, 0x4a, 0x23, 0xab, 0x67, 0xf5, 0xcf, 0xad, 0xaf, 0xce,
	0xc8, 0x1c, 0xa2, 0x0c, 0x06, 0xc8, 0x75, 0x8d, 0x86, 0x3d, 0x74, 0x90, 0x84, 0x4b, 0xb0, 0xd7,
	0x36, 0x1b, 0x9f, 0xfa, 0x56, 0xdb, 0x41, 0x59, 0x5c, 0x00, 0xb5, 0xf5, 0x71, 0xd4, 0x74, 0x90,
	0xcc, 0x4d, 0xce, 0xa0, 0xd1, 0x36, 0x1c, 0xa4, 0xe8, 0xdf, 0x25, 0x50, 0x78, 0xe7, 0xe5, 0x5e,
	0x76, 0xc3, 0xea, 0xa1, 0x0c, 0xce, 0x83, 0xdc, 0x68, 0x19, 0x48, 0xe2, 0xc1, 0xf0, 0xbc, 0x9f,
	0xf4, 0x18, 0x76, 0x6d, 0xc3, 0x40, 0x32, 0xde, 0x03, 0xe5, 0xb4, 0x3f, 0xb2, 0x91, 0x22, 0x22,
	0xf3, 0xcc, 0x40, 0x2a, 0xf7, 0x39, 0xe6, 0x17, 0x94, 0xe3, 0x3e, 0xc7, 0x38, 0x33, 0x2c, 0x94,
	0xe7, 0xa1, 0x61, 0x76, 0xba, 0x43, 0xb4, 0xc7, 0x8d, 0x96, 0x69, 0x19, 0xa8, 0x20, 0x1a, 0x1a,
	0x16, 0x02, 0x7e, 0xf4, 0xa1, 0xd1, 0xea, 0xa1, 0x22, 0xf7, 0x7d, 0x1e, 0x19, 0x86, 0x85, 0x4a,
	0xfc, 0xb0, 0x67, 0x5a, 0x1d, 0x54, 0xd6, 0x5f, 0x80, 0xd2, 0x26, 0xe3, 0x09, 0x7e, 0x02, 0xea,
	0xd8, 0x8d, 0xbc, 0x58, 0x93, 0x8e, 0xe5, 0x6a, 0xb1, 0x5e, 0x5c, 0xc2, 0x62, 0x27, 0x8a, 0x7e,
	0x03, 0xb9, 0x41, 0xe0, 0xde, 0x92, 0x08, 0x57, 0x20, 0xeb, 0x7b, 0x02, 0xb3, 0x6c, 0x67, 0x7d,
	0x0f, 0x63, 0x50, 0x42, 0x77, 0x4a, 0x04, 0xd2, 0x82, 0x2d, 0x62, 0x7c, 0x00, 0xea, 0xf8, 0xca,
	0x9f, 0xc5, 0x9a, 0x2c, 0x6c, 0x49, 0x82, 0x1f, 0x83, 0x72, 0xe5, 0x86, 0x9e, 0xa6, 0x1c, 0x4b,
	0x4b, 0x53, 0xba, 0x6e, 0xe8, 0xd9, 0x42, 0xe0, 0xad, 0xe2, 0x80, 0x32, 0x4d, 0x15, 0x55, 0x22,
	0xd6, 0xeb, 0x90, 0x4f, 0x06, 0xc7, 0xf8, 0x39, 0xe4, 0x67, 0x49, 0x98, 0x2e, 0x5a, 0x4e, 0x5b,
	0x24, 0x06, 0xfb, 0x4e, 0xd5, 0xdb, 0xa0, 0xf0, 0xae, 0xf8, 0x11, 0xc8, 0x34, 0x24, 0x62, 0xd7,
	0xb5, 0x5b, 0xf1, 0x73, 0x2e, 0xb3, 0x1b, 0x2a, 0x16, 0x5f, 0x97, 0xd9, 0x0d, 0xd5, 0x7f, 0x48,
	0xa0, 0x9c, 0x06, 0x74, 0xf6, 0x7f, 0x6d, 0x38, 0x5c, 0x76, 0x15, 0x11, 0x22, 0x58, 0xac, 0xc3,
	0x15, 0x0a, 0x07, 0x73, 0x49, 0xe7, 0xd1, 0x1a, 0x18, 0xe1, 0x10, 0x82, 0x30, 0xf8, 0xd7, 0x44,
	0x80, 0xd9, 0x30, 0xf8, 0xd7, 0x44, 0xff, 0x2d, 0x81, 0xd2, 0xe1, 0xe4, 0xab, 0xcb, 0x8c, 0xb8,
	0xb9, 0xb2, 0xc2, 0x28, 0x5e, 0x40, 0xba, 0xf7, 0xdd, 0x92, 0xb7, 0x2d, 0x2c, 0xde, 0xf6, 0x00,
	0xd4, 0x78, 0xea, 0x06, 0x81, 0x06, 0xc9, 0x3b, 0x8a, 0x04, 0x23, 0x90, 0x2f, 0xfc, 0x6f, 0x5a,
	0x51, 0x9c, 0xf1, 0x10, 0x1f, 0x42, 0xce, 0x23, 0x6e, 0x40, 0x22, 0xad, 0x24, 0x0e, 0xd3, 0x8c,
	0xef, 0xed, 0x91, 0xf1, 0x44, 0x2b, 0x6f, 0x7e, 0x57, 0x42, 0x10, 0x17, 0x0b, 0xe8, 0x4c, 0xdb,
	0x5f, 0xb9, 0x18, 0xa7, 0x6e, 0x0b, 0x81, 0xcf, 0x9a, 0xfa, 0xa1, 0x86, 0x92, 0x59, 0x53, 0x3f,
	0xac, 0xff, 0x52, 0x41, 0x1d, 0x70, 0x1b, 0xae, 0x41, 0xa9, 0x15, 0x11, 0x97, 0x91, 0xf4, 0xcb,
	0x5c, 0xfd, 0x1c, 0x8e, 0x56, 0x53, 0x3d, 0x83, 0xdf, 0x40, 0x79, 0xd9, 0x1f, 0xe3, 0x35, 0x36,
	0x47, 0x6b, 0xb9, 0x9e, 0xc1, 0x2f, 0xa1, 0xd0, 0x21, 0xec, 0x9f, 0xfb, 0xef, 0x2f, 0xcc, 0xcd,
	0x5b, 0x8b, 0x03, 0xdd, 0x55, 0x52, 0x05, 0x48, 0x56, 0x12, 0x8f, 0x77, 0x77, 0x7f, 0x9e, 0x1c,
	0x2d, 0x27, 0x7a, 0x06, 0x3f, 0x83, 0x7c, 0x87, 0xb0, 0x9d, 0xb6, 0xf7, 0x70, 0x98, 0xda, 0xd2,
	0x4b, 0x34, 0x6f, 0x79, 0x62, 0x7a, 0xab, 0x55, 0xf7, 0xdd, 0xb4, 0x9c, 0x16, 0xa6, 0xab, 0x6f,
	0x9b, 0x72, 0x02, 0x15, 0x67, 0x65, 0xca, 0xae, 0xee, 0xef, 0x00, 0x2d, 0xd0, 0xc4, 0xe9, 0x80,
	0xdd, 0xf4, 0x5f, 0x41, 0xc5, 0xf1, 0xff, 0x3e, 0x66, 0x63, 0xa9, 0xb2, 0x73, 0x37, 0xc3, 0x09,
	0x28, 0xdb, 0x09, 0xff, 0x04, 0x1e, 0x34, 0x82, 0x80, 0x8e, 0x53, 0xfc, 0xbc, 0x66, 0xfb, 0x84,
	0xd7, 0x80, 0x1d, 0xc2, 0x9a, 0x73, 0xc6, 0x68, 0x38, 0xa0, 0xb1, 0xcf, 0x7c, 0x1a, 0x6e, 0xaf,
	0xa8, 0x02, 0xa4, 0xa0, 0x9a, 0x84, 0x6d, 0x73, 0x5e, 0xe4, 0xc4, 0x6f, 0xed, 0xed, 0x9f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xa9, 0xfa, 0x85, 0x8e, 0xef, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PokerClient is the client API for Poker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PokerClient interface {
	CreatePlayer(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Player, error)
	CreatePlayers(ctx context.Context, in *Players, opts ...grpc.CallOption) (*Players, error)
	GetPlayer(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Player, error)
	GetPlayerByName(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Player, error)
	CreateGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error)
	GetGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error)
	GetGamePlayersByGameId(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Players, error)
	GetGameByName(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error)
	SetGamePlayers(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Players, error)
	GetPlayersByName(ctx context.Context, in *Players, opts ...grpc.CallOption) (*Players, error)
	SitGamePlayers(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error)
	// Allocate players to a table slot.
	SetPlayerSlot(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Player, error)
	// allocate slots based on the players in a game
	// TODO: Define server method
	AllocateGameSlots(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error)
	SetButtonPositions(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error)
	SetGameBet(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error)
}

type pokerClient struct {
	cc *grpc.ClientConn
}

func NewPokerClient(cc *grpc.ClientConn) PokerClient {
	return &pokerClient{cc}
}

func (c *pokerClient) CreatePlayer(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Player, error) {
	out := new(Player)
	err := c.cc.Invoke(ctx, "/poker.Poker/CreatePlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) CreatePlayers(ctx context.Context, in *Players, opts ...grpc.CallOption) (*Players, error) {
	out := new(Players)
	err := c.cc.Invoke(ctx, "/poker.Poker/CreatePlayers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) GetPlayer(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Player, error) {
	out := new(Player)
	err := c.cc.Invoke(ctx, "/poker.Poker/GetPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) GetPlayerByName(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Player, error) {
	out := new(Player)
	err := c.cc.Invoke(ctx, "/poker.Poker/GetPlayerByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) CreateGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/poker.Poker/CreateGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) GetGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/poker.Poker/GetGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) GetGamePlayersByGameId(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Players, error) {
	out := new(Players)
	err := c.cc.Invoke(ctx, "/poker.Poker/GetGamePlayersByGameId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) GetGameByName(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/poker.Poker/GetGameByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) SetGamePlayers(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Players, error) {
	out := new(Players)
	err := c.cc.Invoke(ctx, "/poker.Poker/SetGamePlayers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) GetPlayersByName(ctx context.Context, in *Players, opts ...grpc.CallOption) (*Players, error) {
	out := new(Players)
	err := c.cc.Invoke(ctx, "/poker.Poker/GetPlayersByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) SitGamePlayers(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/poker.Poker/SitGamePlayers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) SetPlayerSlot(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Player, error) {
	out := new(Player)
	err := c.cc.Invoke(ctx, "/poker.Poker/SetPlayerSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) AllocateGameSlots(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/poker.Poker/AllocateGameSlots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) SetButtonPositions(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/poker.Poker/SetButtonPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) SetGameBet(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/poker.Poker/SetGameBet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PokerServer is the server API for Poker service.
type PokerServer interface {
	CreatePlayer(context.Context, *Player) (*Player, error)
	CreatePlayers(context.Context, *Players) (*Players, error)
	GetPlayer(context.Context, *Player) (*Player, error)
	GetPlayerByName(context.Context, *Player) (*Player, error)
	CreateGame(context.Context, *Game) (*Game, error)
	GetGame(context.Context, *Game) (*Game, error)
	GetGamePlayersByGameId(context.Context, *Game) (*Players, error)
	GetGameByName(context.Context, *Game) (*Game, error)
	SetGamePlayers(context.Context, *Game) (*Players, error)
	GetPlayersByName(context.Context, *Players) (*Players, error)
	SitGamePlayers(context.Context, *Game) (*Game, error)
	// Allocate players to a table slot.
	SetPlayerSlot(context.Context, *Player) (*Player, error)
	// allocate slots based on the players in a game
	// TODO: Define server method
	AllocateGameSlots(context.Context, *Game) (*Game, error)
	SetButtonPositions(context.Context, *Game) (*Game, error)
	SetGameBet(context.Context, *Game) (*Game, error)
}

// UnimplementedPokerServer can be embedded to have forward compatible implementations.
type UnimplementedPokerServer struct {
}

func (*UnimplementedPokerServer) CreatePlayer(ctx context.Context, req *Player) (*Player, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayer not implemented")
}
func (*UnimplementedPokerServer) CreatePlayers(ctx context.Context, req *Players) (*Players, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayers not implemented")
}
func (*UnimplementedPokerServer) GetPlayer(ctx context.Context, req *Player) (*Player, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayer not implemented")
}
func (*UnimplementedPokerServer) GetPlayerByName(ctx context.Context, req *Player) (*Player, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerByName not implemented")
}
func (*UnimplementedPokerServer) CreateGame(ctx context.Context, req *Game) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGame not implemented")
}
func (*UnimplementedPokerServer) GetGame(ctx context.Context, req *Game) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGame not implemented")
}
func (*UnimplementedPokerServer) GetGamePlayersByGameId(ctx context.Context, req *Game) (*Players, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGamePlayersByGameId not implemented")
}
func (*UnimplementedPokerServer) GetGameByName(ctx context.Context, req *Game) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameByName not implemented")
}
func (*UnimplementedPokerServer) SetGamePlayers(ctx context.Context, req *Game) (*Players, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGamePlayers not implemented")
}
func (*UnimplementedPokerServer) GetPlayersByName(ctx context.Context, req *Players) (*Players, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayersByName not implemented")
}
func (*UnimplementedPokerServer) SitGamePlayers(ctx context.Context, req *Game) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SitGamePlayers not implemented")
}
func (*UnimplementedPokerServer) SetPlayerSlot(ctx context.Context, req *Player) (*Player, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPlayerSlot not implemented")
}
func (*UnimplementedPokerServer) AllocateGameSlots(ctx context.Context, req *Game) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateGameSlots not implemented")
}
func (*UnimplementedPokerServer) SetButtonPositions(ctx context.Context, req *Game) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetButtonPositions not implemented")
}
func (*UnimplementedPokerServer) SetGameBet(ctx context.Context, req *Game) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGameBet not implemented")
}

func RegisterPokerServer(s *grpc.Server, srv PokerServer) {
	s.RegisterService(&_Poker_serviceDesc, srv)
}

func _Poker_CreatePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).CreatePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/CreatePlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).CreatePlayer(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_CreatePlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Players)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).CreatePlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/CreatePlayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).CreatePlayers(ctx, req.(*Players))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_GetPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).GetPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/GetPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).GetPlayer(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_GetPlayerByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).GetPlayerByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/GetPlayerByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).GetPlayerByName(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).CreateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/CreateGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).CreateGame(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_GetGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).GetGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/GetGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).GetGame(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_GetGamePlayersByGameId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).GetGamePlayersByGameId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/GetGamePlayersByGameId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).GetGamePlayersByGameId(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_GetGameByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).GetGameByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/GetGameByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).GetGameByName(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_SetGamePlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).SetGamePlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/SetGamePlayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).SetGamePlayers(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_GetPlayersByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Players)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).GetPlayersByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/GetPlayersByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).GetPlayersByName(ctx, req.(*Players))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_SitGamePlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).SitGamePlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/SitGamePlayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).SitGamePlayers(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_SetPlayerSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).SetPlayerSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/SetPlayerSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).SetPlayerSlot(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_AllocateGameSlots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).AllocateGameSlots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/AllocateGameSlots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).AllocateGameSlots(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_SetButtonPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).SetButtonPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/SetButtonPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).SetButtonPositions(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_SetGameBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).SetGameBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/SetGameBet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).SetGameBet(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

var _Poker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "poker.Poker",
	HandlerType: (*PokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlayer",
			Handler:    _Poker_CreatePlayer_Handler,
		},
		{
			MethodName: "CreatePlayers",
			Handler:    _Poker_CreatePlayers_Handler,
		},
		{
			MethodName: "GetPlayer",
			Handler:    _Poker_GetPlayer_Handler,
		},
		{
			MethodName: "GetPlayerByName",
			Handler:    _Poker_GetPlayerByName_Handler,
		},
		{
			MethodName: "CreateGame",
			Handler:    _Poker_CreateGame_Handler,
		},
		{
			MethodName: "GetGame",
			Handler:    _Poker_GetGame_Handler,
		},
		{
			MethodName: "GetGamePlayersByGameId",
			Handler:    _Poker_GetGamePlayersByGameId_Handler,
		},
		{
			MethodName: "GetGameByName",
			Handler:    _Poker_GetGameByName_Handler,
		},
		{
			MethodName: "SetGamePlayers",
			Handler:    _Poker_SetGamePlayers_Handler,
		},
		{
			MethodName: "GetPlayersByName",
			Handler:    _Poker_GetPlayersByName_Handler,
		},
		{
			MethodName: "SitGamePlayers",
			Handler:    _Poker_SitGamePlayers_Handler,
		},
		{
			MethodName: "SetPlayerSlot",
			Handler:    _Poker_SetPlayerSlot_Handler,
		},
		{
			MethodName: "AllocateGameSlots",
			Handler:    _Poker_AllocateGameSlots_Handler,
		},
		{
			MethodName: "SetButtonPositions",
			Handler:    _Poker_SetButtonPositions_Handler,
		},
		{
			MethodName: "SetGameBet",
			Handler:    _Poker_SetGameBet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobufs/poker.proto",
}
