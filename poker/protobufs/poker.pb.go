// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protobufs/poker.proto

package poker

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RoundStatus int32

const (
	RoundStatus_NOT_STARTED RoundStatus = 0
	RoundStatus_PRE_FLOP    RoundStatus = 1
	RoundStatus_FLOP        RoundStatus = 2
	RoundStatus_RIVER       RoundStatus = 3
	RoundStatus_TURN        RoundStatus = 4
	RoundStatus_SHOW        RoundStatus = 5
	RoundStatus_OVER        RoundStatus = 6
)

var RoundStatus_name = map[int32]string{
	0: "NOT_STARTED",
	1: "PRE_FLOP",
	2: "FLOP",
	3: "RIVER",
	4: "TURN",
	5: "SHOW",
	6: "OVER",
}

var RoundStatus_value = map[string]int32{
	"NOT_STARTED": 0,
	"PRE_FLOP":    1,
	"FLOP":        2,
	"RIVER":       3,
	"TURN":        4,
	"SHOW":        5,
	"OVER":        6,
}

func (x RoundStatus) String() string {
	return proto.EnumName(RoundStatus_name, int32(x))
}

func (RoundStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_818c499f6358623d, []int{0}
}

type Bet_BetType int32

const (
	Bet_NONE  Bet_BetType = 0
	Bet_FOLD  Bet_BetType = 1
	Bet_CALL  Bet_BetType = 2
	Bet_RAISE Bet_BetType = 3
	Bet_SMALL Bet_BetType = 4
	Bet_BIG   Bet_BetType = 5
)

var Bet_BetType_name = map[int32]string{
	0: "NONE",
	1: "FOLD",
	2: "CALL",
	3: "RAISE",
	4: "SMALL",
	5: "BIG",
}

var Bet_BetType_value = map[string]int32{
	"NONE":  0,
	"FOLD":  1,
	"CALL":  2,
	"RAISE": 3,
	"SMALL": 4,
	"BIG":   5,
}

func (x Bet_BetType) String() string {
	return proto.EnumName(Bet_BetType_name, int32(x))
}

func (Bet_BetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_818c499f6358623d, []int{7, 0}
}

// convenience method, not saved in db
type AmountToCall struct {
	Player               *Player  `protobuf:"bytes,1,opt,name=player,proto3" json:"player,omitempty"`
	Round                *Round   `protobuf:"bytes,2,opt,name=round,proto3" json:"round,omitempty"`
	Chips                int64    `protobuf:"varint,3,opt,name=chips,proto3" json:"chips,omitempty"`
	BettingOver          bool     `protobuf:"varint,4,opt,name=betting_over,json=bettingOver,proto3" json:"betting_over,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AmountToCall) Reset()         { *m = AmountToCall{} }
func (m *AmountToCall) String() string { return proto.CompactTextString(m) }
func (*AmountToCall) ProtoMessage()    {}
func (*AmountToCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_818c499f6358623d, []int{0}
}

func (m *AmountToCall) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AmountToCall.Unmarshal(m, b)
}
func (m *AmountToCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AmountToCall.Marshal(b, m, deterministic)
}
func (m *AmountToCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AmountToCall.Merge(m, src)
}
func (m *AmountToCall) XXX_Size() int {
	return xxx_messageInfo_AmountToCall.Size(m)
}
func (m *AmountToCall) XXX_DiscardUnknown() {
	xxx_messageInfo_AmountToCall.DiscardUnknown(m)
}

var xxx_messageInfo_AmountToCall proto.InternalMessageInfo

func (m *AmountToCall) GetPlayer() *Player {
	if m != nil {
		return m.Player
	}
	return nil
}

func (m *AmountToCall) GetRound() *Round {
	if m != nil {
		return m.Round
	}
	return nil
}

func (m *AmountToCall) GetChips() int64 {
	if m != nil {
		return m.Chips
	}
	return 0
}

func (m *AmountToCall) GetBettingOver() bool {
	if m != nil {
		return m.BettingOver
	}
	return false
}

type Player struct {
	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Chips int64  `protobuf:"varint,3,opt,name=chips,proto3" json:"chips,omitempty"`
	// What seat at the table they are at 1-8 only
	Slot int64 `protobuf:"varint,4,opt,name=slot,proto3" json:"slot,omitempty"`
	// Whether they are in a hand
	InHand               bool     `protobuf:"varint,5,opt,name=in_hand,json=inHand,proto3" json:"in_hand,omitempty"`
	Cards                string   `protobuf:"bytes,6,opt,name=cards,proto3" json:"cards,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Player) Reset()         { *m = Player{} }
func (m *Player) String() string { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()    {}
func (*Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_818c499f6358623d, []int{1}
}

func (m *Player) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Player.Unmarshal(m, b)
}
func (m *Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Player.Marshal(b, m, deterministic)
}
func (m *Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player.Merge(m, src)
}
func (m *Player) XXX_Size() int {
	return xxx_messageInfo_Player.Size(m)
}
func (m *Player) XXX_DiscardUnknown() {
	xxx_messageInfo_Player.DiscardUnknown(m)
}

var xxx_messageInfo_Player proto.InternalMessageInfo

func (m *Player) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Player) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Player) GetChips() int64 {
	if m != nil {
		return m.Chips
	}
	return 0
}

func (m *Player) GetSlot() int64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *Player) GetInHand() bool {
	if m != nil {
		return m.InHand
	}
	return false
}

func (m *Player) GetCards() string {
	if m != nil {
		return m.Cards
	}
	return ""
}

type Players struct {
	Players              []*Player `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Players) Reset()         { *m = Players{} }
func (m *Players) String() string { return proto.CompactTextString(m) }
func (*Players) ProtoMessage()    {}
func (*Players) Descriptor() ([]byte, []int) {
	return fileDescriptor_818c499f6358623d, []int{2}
}

func (m *Players) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Players.Unmarshal(m, b)
}
func (m *Players) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Players.Marshal(b, m, deterministic)
}
func (m *Players) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Players.Merge(m, src)
}
func (m *Players) XXX_Size() int {
	return xxx_messageInfo_Players.Size(m)
}
func (m *Players) XXX_DiscardUnknown() {
	xxx_messageInfo_Players.DiscardUnknown(m)
}

var xxx_messageInfo_Players proto.InternalMessageInfo

func (m *Players) GetPlayers() []*Player {
	if m != nil {
		return m.Players
	}
	return nil
}

type Game struct {
	Players *Players `protobuf:"bytes,1,opt,name=players,proto3" json:"players,omitempty"`
	Name    string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// button positions
	Id                   int64    `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Dealer               int64    `protobuf:"varint,4,opt,name=dealer,proto3" json:"dealer,omitempty"`
	Min                  int64    `protobuf:"varint,5,opt,name=min,proto3" json:"min,omitempty"`
	Rounds               *Rounds  `protobuf:"bytes,6,opt,name=rounds,proto3" json:"rounds,omitempty"`
	InRound              bool     `protobuf:"varint,7,opt,name=in_round,json=inRound,proto3" json:"in_round,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Game) Reset()         { *m = Game{} }
func (m *Game) String() string { return proto.CompactTextString(m) }
func (*Game) ProtoMessage()    {}
func (*Game) Descriptor() ([]byte, []int) {
	return fileDescriptor_818c499f6358623d, []int{3}
}

func (m *Game) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Game.Unmarshal(m, b)
}
func (m *Game) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Game.Marshal(b, m, deterministic)
}
func (m *Game) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Game.Merge(m, src)
}
func (m *Game) XXX_Size() int {
	return xxx_messageInfo_Game.Size(m)
}
func (m *Game) XXX_DiscardUnknown() {
	xxx_messageInfo_Game.DiscardUnknown(m)
}

var xxx_messageInfo_Game proto.InternalMessageInfo

func (m *Game) GetPlayers() *Players {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *Game) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Game) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Game) GetDealer() int64 {
	if m != nil {
		return m.Dealer
	}
	return 0
}

func (m *Game) GetMin() int64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *Game) GetRounds() *Rounds {
	if m != nil {
		return m.Rounds
	}
	return nil
}

func (m *Game) GetInRound() bool {
	if m != nil {
		return m.InRound
	}
	return false
}

type Games struct {
	Games                []*Game  `protobuf:"bytes,1,rep,name=games,proto3" json:"games,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Games) Reset()         { *m = Games{} }
func (m *Games) String() string { return proto.CompactTextString(m) }
func (*Games) ProtoMessage()    {}
func (*Games) Descriptor() ([]byte, []int) {
	return fileDescriptor_818c499f6358623d, []int{4}
}

func (m *Games) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Games.Unmarshal(m, b)
}
func (m *Games) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Games.Marshal(b, m, deterministic)
}
func (m *Games) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Games.Merge(m, src)
}
func (m *Games) XXX_Size() int {
	return xxx_messageInfo_Games.Size(m)
}
func (m *Games) XXX_DiscardUnknown() {
	xxx_messageInfo_Games.DiscardUnknown(m)
}

var xxx_messageInfo_Games proto.InternalMessageInfo

func (m *Games) GetGames() []*Game {
	if m != nil {
		return m.Games
	}
	return nil
}

// any info here is only relevant within a particular hand
type Round struct {
	Id      int64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status  RoundStatus `protobuf:"varint,2,opt,name=status,proto3,enum=poker.RoundStatus" json:"status,omitempty"`
	Players *Players    `protobuf:"bytes,3,opt,name=players,proto3" json:"players,omitempty"`
	Deck    string      `protobuf:"bytes,4,opt,name=deck,proto3" json:"deck,omitempty"`
	Flop    string      `protobuf:"bytes,5,opt,name=flop,proto3" json:"flop,omitempty"`
	Turn    string      `protobuf:"bytes,6,opt,name=turn,proto3" json:"turn,omitempty"`
	River   string      `protobuf:"bytes,7,opt,name=river,proto3" json:"river,omitempty"`
	Bets    *Bets       `protobuf:"bytes,8,opt,name=bets,proto3" json:"bets,omitempty"`
	Game    int64       `protobuf:"varint,9,opt,name=game,proto3" json:"game,omitempty"`
	// Slot of person who has to bet
	Action               int64    `protobuf:"varint,10,opt,name=action,proto3" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Round) Reset()         { *m = Round{} }
func (m *Round) String() string { return proto.CompactTextString(m) }
func (*Round) ProtoMessage()    {}
func (*Round) Descriptor() ([]byte, []int) {
	return fileDescriptor_818c499f6358623d, []int{5}
}

func (m *Round) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Round.Unmarshal(m, b)
}
func (m *Round) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Round.Marshal(b, m, deterministic)
}
func (m *Round) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Round.Merge(m, src)
}
func (m *Round) XXX_Size() int {
	return xxx_messageInfo_Round.Size(m)
}
func (m *Round) XXX_DiscardUnknown() {
	xxx_messageInfo_Round.DiscardUnknown(m)
}

var xxx_messageInfo_Round proto.InternalMessageInfo

func (m *Round) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Round) GetStatus() RoundStatus {
	if m != nil {
		return m.Status
	}
	return RoundStatus_NOT_STARTED
}

func (m *Round) GetPlayers() *Players {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *Round) GetDeck() string {
	if m != nil {
		return m.Deck
	}
	return ""
}

func (m *Round) GetFlop() string {
	if m != nil {
		return m.Flop
	}
	return ""
}

func (m *Round) GetTurn() string {
	if m != nil {
		return m.Turn
	}
	return ""
}

func (m *Round) GetRiver() string {
	if m != nil {
		return m.River
	}
	return ""
}

func (m *Round) GetBets() *Bets {
	if m != nil {
		return m.Bets
	}
	return nil
}

func (m *Round) GetGame() int64 {
	if m != nil {
		return m.Game
	}
	return 0
}

func (m *Round) GetAction() int64 {
	if m != nil {
		return m.Action
	}
	return 0
}

type Rounds struct {
	Rounds               []*Round `protobuf:"bytes,1,rep,name=rounds,proto3" json:"rounds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Rounds) Reset()         { *m = Rounds{} }
func (m *Rounds) String() string { return proto.CompactTextString(m) }
func (*Rounds) ProtoMessage()    {}
func (*Rounds) Descriptor() ([]byte, []int) {
	return fileDescriptor_818c499f6358623d, []int{6}
}

func (m *Rounds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rounds.Unmarshal(m, b)
}
func (m *Rounds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rounds.Marshal(b, m, deterministic)
}
func (m *Rounds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rounds.Merge(m, src)
}
func (m *Rounds) XXX_Size() int {
	return xxx_messageInfo_Rounds.Size(m)
}
func (m *Rounds) XXX_DiscardUnknown() {
	xxx_messageInfo_Rounds.DiscardUnknown(m)
}

var xxx_messageInfo_Rounds proto.InternalMessageInfo

func (m *Rounds) GetRounds() []*Round {
	if m != nil {
		return m.Rounds
	}
	return nil
}

type Bet struct {
	Id                   int64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status               RoundStatus `protobuf:"varint,2,opt,name=status,proto3,enum=poker.RoundStatus" json:"status,omitempty"`
	Round                int64       `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	Game                 int64       `protobuf:"varint,4,opt,name=game,proto3" json:"game,omitempty"`
	Player               int64       `protobuf:"varint,5,opt,name=player,proto3" json:"player,omitempty"`
	Chips                int64       `protobuf:"varint,6,opt,name=chips,proto3" json:"chips,omitempty"`
	Type                 Bet_BetType `protobuf:"varint,7,opt,name=type,proto3,enum=poker.Bet_BetType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Bet) Reset()         { *m = Bet{} }
func (m *Bet) String() string { return proto.CompactTextString(m) }
func (*Bet) ProtoMessage()    {}
func (*Bet) Descriptor() ([]byte, []int) {
	return fileDescriptor_818c499f6358623d, []int{7}
}

func (m *Bet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Bet.Unmarshal(m, b)
}
func (m *Bet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Bet.Marshal(b, m, deterministic)
}
func (m *Bet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bet.Merge(m, src)
}
func (m *Bet) XXX_Size() int {
	return xxx_messageInfo_Bet.Size(m)
}
func (m *Bet) XXX_DiscardUnknown() {
	xxx_messageInfo_Bet.DiscardUnknown(m)
}

var xxx_messageInfo_Bet proto.InternalMessageInfo

func (m *Bet) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Bet) GetStatus() RoundStatus {
	if m != nil {
		return m.Status
	}
	return RoundStatus_NOT_STARTED
}

func (m *Bet) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *Bet) GetGame() int64 {
	if m != nil {
		return m.Game
	}
	return 0
}

func (m *Bet) GetPlayer() int64 {
	if m != nil {
		return m.Player
	}
	return 0
}

func (m *Bet) GetChips() int64 {
	if m != nil {
		return m.Chips
	}
	return 0
}

func (m *Bet) GetType() Bet_BetType {
	if m != nil {
		return m.Type
	}
	return Bet_NONE
}

type Bets struct {
	Bets                 []*Bet   `protobuf:"bytes,1,rep,name=bets,proto3" json:"bets,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Bets) Reset()         { *m = Bets{} }
func (m *Bets) String() string { return proto.CompactTextString(m) }
func (*Bets) ProtoMessage()    {}
func (*Bets) Descriptor() ([]byte, []int) {
	return fileDescriptor_818c499f6358623d, []int{8}
}

func (m *Bets) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Bets.Unmarshal(m, b)
}
func (m *Bets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Bets.Marshal(b, m, deterministic)
}
func (m *Bets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bets.Merge(m, src)
}
func (m *Bets) XXX_Size() int {
	return xxx_messageInfo_Bets.Size(m)
}
func (m *Bets) XXX_DiscardUnknown() {
	xxx_messageInfo_Bets.DiscardUnknown(m)
}

var xxx_messageInfo_Bets proto.InternalMessageInfo

func (m *Bets) GetBets() []*Bet {
	if m != nil {
		return m.Bets
	}
	return nil
}

func init() {
	proto.RegisterEnum("poker.RoundStatus", RoundStatus_name, RoundStatus_value)
	proto.RegisterEnum("poker.Bet_BetType", Bet_BetType_name, Bet_BetType_value)
	proto.RegisterType((*AmountToCall)(nil), "poker.AmountToCall")
	proto.RegisterType((*Player)(nil), "poker.Player")
	proto.RegisterType((*Players)(nil), "poker.Players")
	proto.RegisterType((*Game)(nil), "poker.Game")
	proto.RegisterType((*Games)(nil), "poker.Games")
	proto.RegisterType((*Round)(nil), "poker.Round")
	proto.RegisterType((*Rounds)(nil), "poker.Rounds")
	proto.RegisterType((*Bet)(nil), "poker.Bet")
	proto.RegisterType((*Bets)(nil), "poker.Bets")
}

func init() { proto.RegisterFile("protobufs/poker.proto", fileDescriptor_818c499f6358623d) }

var fileDescriptor_818c499f6358623d = []byte{
	// 1189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0x5f, 0x6f, 0xe2, 0x46,
	0x10, 0x07, 0xcc, 0xdf, 0x01, 0x12, 0x67, 0x2f, 0x49, 0x69, 0x2a, 0xb5, 0xa9, 0x75, 0xb9, 0x72,
	0xb9, 0x16, 0xd2, 0xf4, 0xcf, 0xa9, 0xed, 0x43, 0x05, 0x09, 0xe4, 0x90, 0x12, 0x88, 0xd6, 0xdc,
	0xf5, 0x11, 0x39, 0x61, 0x2f, 0x67, 0xc5, 0xd8, 0xc8, 0x5e, 0xa2, 0xe6, 0x03, 0xf4, 0xa1, 0x52,
	0x9f, 0xfa, 0x89, 0xfa, 0x49, 0xfa, 0x59, 0xaa, 0x9d, 0x5d, 0x88, 0x4d, 0x08, 0x76, 0xdb, 0x07,
	0xa4, 0x99, 0x9d, 0x99, 0x9d, 0x99, 0xdf, 0xcc, 0xce, 0x18, 0xd8, 0x99, 0xfa, 0x1e, 0xf7, 0xae,
	0x66, 0xef, 0x83, 0xe6, 0xd4, 0xbb, 0x65, 0x7e, 0x03, 0x79, 0x92, 0x43, 0x66, 0xef, 0x93, 0x1b,
	0xcf, 0xbb, 0x71, 0x58, 0x73, 0xae, 0xd4, 0x64, 0x93, 0x29, 0xbf, 0x97, 0x3a, 0xc6, 0x9f, 0x69,
	0xa8, 0xb4, 0x26, 0xde, 0xcc, 0xe5, 0x43, 0xef, 0xc4, 0x72, 0x1c, 0x72, 0x00, 0xf9, 0xa9, 0x63,
	0xdd, 0x33, 0xbf, 0x96, 0xde, 0x4f, 0xd7, 0xcb, 0xc7, 0xd5, 0x86, 0xbc, 0xf2, 0x12, 0x0f, 0xa9,
	0x12, 0x12, 0x03, 0x72, 0xbe, 0x37, 0x73, 0xc7, 0xb5, 0x0c, 0x6a, 0x55, 0x94, 0x16, 0x15, 0x67,
	0x54, 0x8a, 0xc8, 0x36, 0xe4, 0xae, 0x3f, 0xd8, 0xd3, 0xa0, 0xa6, 0xed, 0xa7, 0xeb, 0x1a, 0x95,
	0x0c, 0xf9, 0x1c, 0x2a, 0x57, 0x8c, 0x73, 0xdb, 0xbd, 0x19, 0x79, 0x77, 0xcc, 0xaf, 0x65, 0xf7,
	0xd3, 0xf5, 0x22, 0x2d, 0xab, 0xb3, 0xc1, 0x1d, 0xf3, 0x8d, 0xdf, 0xd2, 0x90, 0x97, 0xfe, 0xc8,
	0x06, 0x64, 0xec, 0x31, 0x86, 0xa2, 0xd1, 0x8c, 0x3d, 0x26, 0x04, 0xb2, 0xae, 0x35, 0x61, 0xe8,
	0xb6, 0x44, 0x91, 0x7e, 0xc2, 0x0f, 0x81, 0x6c, 0xe0, 0x78, 0x1c, 0xef, 0xd7, 0x28, 0xd2, 0xe4,
	0x23, 0x28, 0xd8, 0xee, 0xe8, 0x83, 0xe5, 0x8e, 0x6b, 0x39, 0x74, 0x9b, 0xb7, 0xdd, 0x37, 0x96,
	0x0a, 0xd5, 0xf2, 0xc7, 0x41, 0x2d, 0x8f, 0xf7, 0x4a, 0xc6, 0x38, 0x86, 0x82, 0x0c, 0x23, 0x20,
	0x5f, 0x40, 0x41, 0x66, 0x1e, 0xd4, 0xd2, 0xfb, 0xda, 0x63, 0x5c, 0xe6, 0x52, 0xe3, 0xaf, 0x34,
	0x64, 0xcf, 0x44, 0x54, 0xf5, 0xb0, 0x85, 0xc0, 0x68, 0x23, 0x62, 0x11, 0x2c, 0x4c, 0x56, 0xe6,
	0x24, 0xf3, 0xd6, 0x16, 0x79, 0xef, 0x42, 0x7e, 0xcc, 0x2c, 0x47, 0xe1, 0xa5, 0x51, 0xc5, 0x11,
	0x1d, 0xb4, 0x89, 0xed, 0x62, 0x36, 0x1a, 0x15, 0xa4, 0x28, 0x20, 0xc2, 0x2f, 0x73, 0x79, 0x08,
	0x14, 0x4b, 0x13, 0x50, 0x25, 0x24, 0x1f, 0x43, 0xd1, 0x76, 0x47, 0xb2, 0x86, 0x05, 0xc4, 0xa2,
	0x60, 0xbb, 0xa8, 0x63, 0x1c, 0x42, 0x4e, 0x64, 0x20, 0x4a, 0x95, 0xbb, 0x11, 0x84, 0x4a, 0xb9,
	0xac, 0x6e, 0x12, 0x42, 0x2a, 0x25, 0xc6, 0x1f, 0x19, 0xc8, 0xa1, 0xd5, 0xa3, 0x4a, 0x1d, 0x42,
	0x3e, 0xe0, 0x16, 0x9f, 0x05, 0x98, 0xd7, 0xc6, 0x31, 0x09, 0xc7, 0x61, 0xa2, 0x84, 0x2a, 0x8d,
	0x30, 0x56, 0x5a, 0x2c, 0x56, 0x63, 0x76, 0x7d, 0x8b, 0x28, 0x94, 0x28, 0xd2, 0xe2, 0xec, 0xbd,
	0xe3, 0x4d, 0x11, 0x84, 0x12, 0x45, 0x5a, 0x9c, 0xf1, 0x99, 0xef, 0xaa, 0x7a, 0x22, 0x2d, 0x8a,
	0xec, 0xdb, 0xa2, 0xe5, 0x0a, 0xb2, 0xc8, 0xc8, 0x90, 0xcf, 0x20, 0x7b, 0xc5, 0x78, 0x50, 0x2b,
	0xa2, 0xe3, 0x79, 0x8e, 0x6d, 0xc6, 0x03, 0x8a, 0x02, 0x71, 0x95, 0xc8, 0xb5, 0x56, 0x92, 0x8d,
	0x24, 0x68, 0x51, 0x0e, 0xeb, 0x9a, 0xdb, 0x9e, 0x5b, 0x03, 0x59, 0x0e, 0xc9, 0x19, 0x0d, 0xc8,
	0x4b, 0x9c, 0xc9, 0xf3, 0x45, 0x19, 0x24, 0x78, 0xd1, 0x17, 0xa2, 0x64, 0xc6, 0xef, 0x19, 0xd0,
	0xda, 0x8c, 0xff, 0x2f, 0xf0, 0xb6, 0xe7, 0x4f, 0x51, 0xb5, 0xbf, 0x7c, 0x7c, 0xf3, 0xa8, 0xb3,
	0xd1, 0xa8, 0xd5, 0xdb, 0x96, 0xfd, 0x32, 0x7f, 0xcc, 0x8b, 0x07, 0x94, 0x0f, 0x3f, 0xa0, 0x17,
	0x90, 0xe5, 0xf7, 0x53, 0x86, 0x68, 0x3d, 0x44, 0xd0, 0x66, 0x5c, 0xfc, 0x86, 0xf7, 0x53, 0x46,
	0x51, 0x6e, 0x74, 0xa1, 0xa0, 0x0e, 0x48, 0x11, 0xb2, 0xfd, 0x41, 0xbf, 0xa3, 0xa7, 0x04, 0xd5,
	0x1d, 0x9c, 0x9f, 0xea, 0x69, 0x41, 0x9d, 0xb4, 0xce, 0xcf, 0xf5, 0x0c, 0x29, 0x41, 0x8e, 0xb6,
	0x7a, 0x66, 0x47, 0xd7, 0x04, 0x69, 0x5e, 0x88, 0xd3, 0x2c, 0x29, 0x80, 0xd6, 0xee, 0x9d, 0xe9,
	0x39, 0xe3, 0x05, 0x64, 0x05, 0xea, 0xe4, 0x53, 0x55, 0x10, 0x89, 0x1b, 0x3c, 0xf8, 0x95, 0xf5,
	0x38, 0x1c, 0x41, 0x39, 0x04, 0x03, 0xd9, 0x84, 0x72, 0x7f, 0x30, 0x1c, 0x99, 0xc3, 0x16, 0x1d,
	0x76, 0x4e, 0xf5, 0x14, 0xa9, 0x40, 0xf1, 0x92, 0x76, 0x46, 0xdd, 0xf3, 0xc1, 0xa5, 0x74, 0x8f,
	0x94, 0x74, 0xdf, 0x7b, 0xd7, 0xa1, 0xba, 0x26, 0x0e, 0x87, 0x6f, 0x69, 0x5f, 0xcf, 0x0a, 0xca,
	0x7c, 0x33, 0xf8, 0x45, 0xcf, 0x09, 0x6a, 0x20, 0xa4, 0xf9, 0xe3, 0xbf, 0xb7, 0x20, 0x77, 0x29,
	0x9c, 0x92, 0x06, 0x54, 0x4e, 0x7c, 0x66, 0x71, 0xa6, 0xa6, 0x51, 0xf4, 0xd1, 0xef, 0x45, 0x59,
	0x23, 0x45, 0xbe, 0x86, 0x6a, 0x58, 0x3f, 0x20, 0x4b, 0x7d, 0xbc, 0xb7, 0xc4, 0x1b, 0x29, 0xf2,
	0x03, 0x54, 0x4f, 0x99, 0xc3, 0x9e, 0x36, 0xd9, 0x6d, 0xc8, 0xf9, 0xdd, 0x98, 0xcf, 0xef, 0x46,
	0x47, 0xcc, 0x6f, 0x23, 0x45, 0x5e, 0x41, 0xe9, 0x8c, 0xf1, 0x84, 0xa1, 0x7d, 0x0b, 0xfa, 0x42,
	0x39, 0x68, 0xdf, 0xf7, 0x71, 0xc8, 0xc4, 0x46, 0xf7, 0x3d, 0x90, 0xb7, 0xd3, 0xf1, 0x43, 0x42,
	0x27, 0xd8, 0x19, 0xff, 0xc1, 0x4e, 0xcc, 0xd3, 0x04, 0x76, 0x4d, 0xa8, 0x9a, 0xf3, 0x28, 0x4d,
	0x31, 0xb1, 0xe3, 0xd2, 0xaa, 0x03, 0x48, 0xc4, 0x71, 0xe6, 0x86, 0x27, 0xd4, 0x5e, 0x98, 0x41,
	0xb4, 0xaa, 0x67, 0x8c, 0x0b, 0x46, 0x65, 0xbf, 0x4e, 0xf9, 0x00, 0x0a, 0x4a, 0x79, 0xad, 0xda,
	0x77, 0x50, 0x96, 0xc5, 0x93, 0xf3, 0xb2, 0x12, 0x92, 0xae, 0x2b, 0x5c, 0x13, 0xb6, 0x5a, 0x8e,
	0xe3, 0x5d, 0xab, 0xb0, 0x45, 0xa2, 0xc1, 0x5a, 0x3f, 0x47, 0x40, 0x4c, 0xc6, 0xdb, 0x33, 0xce,
	0x3d, 0xf7, 0xd2, 0x0b, 0x6c, 0x31, 0x6b, 0xd6, 0x5b, 0x3c, 0x87, 0xbc, 0xc9, 0xf8, 0x85, 0xed,
	0xae, 0xd5, 0xfa, 0x0a, 0x36, 0xdf, 0x59, 0x8e, 0x8d, 0x85, 0xf2, 0xe3, 0x21, 0xac, 0x03, 0xf4,
	0xd9, 0xaf, 0xfc, 0x54, 0xae, 0x9e, 0x75, 0x9a, 0x4d, 0xd8, 0x92, 0xf5, 0x17, 0x7c, 0x4f, 0xee,
	0x95, 0xb5, 0x06, 0xaf, 0x61, 0x57, 0x01, 0xbe, 0x68, 0x51, 0x34, 0x5d, 0xb2, 0x5a, 0xd5, 0x31,
	0x1b, 0x66, 0xc4, 0x30, 0xce, 0xe0, 0x67, 0xd8, 0xa6, 0x6c, 0xe2, 0xdd, 0x29, 0xfd, 0xae, 0xef,
	0x4d, 0x30, 0xf1, 0xa5, 0x4e, 0x7b, 0xba, 0x7a, 0x3f, 0x42, 0xed, 0x8c, 0x71, 0x4c, 0x69, 0x11,
	0x2b, 0x72, 0xbd, 0x31, 0x89, 0x4c, 0xf9, 0x15, 0xce, 0x8f, 0x81, 0xc8, 0x76, 0x0d, 0x9b, 0x2f,
	0x59, 0x45, 0x38, 0xb4, 0x79, 0x16, 0xb2, 0x59, 0xc4, 0x1b, 0x49, 0x73, 0xd9, 0xa6, 0x0e, 0xc5,
	0x79, 0x8c, 0x31, 0xb7, 0x1f, 0x81, 0x1e, 0x6a, 0x81, 0x24, 0x16, 0x87, 0x00, 0x26, 0xb7, 0xfc,
	0x44, 0xb7, 0xbf, 0x84, 0x92, 0xe8, 0x16, 0xf9, 0xfc, 0x63, 0xaf, 0x95, 0x2d, 0x73, 0x2a, 0x76,
	0xfa, 0x7a, 0xdd, 0x3a, 0x14, 0xc5, 0xb5, 0x5d, 0xb1, 0xe9, 0x13, 0x05, 0x40, 0x71, 0xd5, 0x27,
	0xba, 0x74, 0x28, 0x3e, 0x15, 0x62, 0x43, 0x95, 0x15, 0x49, 0x10, 0xea, 0x4b, 0x28, 0x99, 0x8c,
	0xb7, 0xf0, 0xf3, 0x20, 0x46, 0xf5, 0x4b, 0xa8, 0x98, 0x8c, 0x8b, 0x17, 0x36, 0x70, 0xc5, 0x47,
	0x41, 0x52, 0xed, 0x24, 0x85, 0x68, 0xc2, 0xa6, 0x44, 0x57, 0x36, 0x51, 0x3c, 0x70, 0x47, 0xa0,
	0x87, 0x0c, 0x92, 0xe0, 0x17, 0x75, 0x91, 0x00, 0xc6, 0x57, 0x50, 0x99, 0x37, 0x29, 0x2e, 0xfe,
	0xa8, 0x76, 0xf8, 0x4b, 0x0c, 0xf7, 0xd7, 0x4e, 0x58, 0xb9, 0xeb, 0xf9, 0x6a, 0xff, 0xaf, 0xb5,
	0x3a, 0x80, 0xc2, 0x85, 0x75, 0xcb, 0x04, 0x9a, 0xa1, 0x0f, 0x89, 0x15, 0xa1, 0x6f, 0x2c, 0x96,
	0xe3, 0x2a, 0xec, 0x1f, 0xad, 0x9d, 0xd7, 0xb0, 0x13, 0xde, 0x6f, 0x7d, 0x8f, 0xab, 0x3f, 0x12,
	0x71, 0xfb, 0xaa, 0x8b, 0xc3, 0x23, 0xfc, 0x8f, 0xab, 0xeb, 0xf9, 0x6a, 0x85, 0x3f, 0x53, 0xca,
	0x61, 0xe9, 0xde, 0xaa, 0x43, 0x23, 0x45, 0x7e, 0x82, 0x6a, 0x2f, 0x68, 0x3f, 0xfc, 0x67, 0xfa,
	0x37, 0xc6, 0x57, 0x79, 0x9c, 0x69, 0xdf, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0x38, 0x97, 0x5b,
	0xfb, 0x38, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PokerClient is the client API for Poker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PokerClient interface {
	// Player RPCs
	CreatePlayer(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Player, error)
	CreatePlayers(ctx context.Context, in *Players, opts ...grpc.CallOption) (*Players, error)
	DeletePlayers(ctx context.Context, in *Players, opts ...grpc.CallOption) (*empty.Empty, error)
	GetPlayer(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Player, error)
	GetPlayersByName(ctx context.Context, in *Players, opts ...grpc.CallOption) (*Players, error)
	UpdatePlayersChips(ctx context.Context, in *Players, opts ...grpc.CallOption) (*Players, error)
	UpdatePlayersCards(ctx context.Context, in *Players, opts ...grpc.CallOption) (*Players, error)
	SetPlayerSlot(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Player, error)
	// Game RPCs
	CreateGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error)
	GetGameByName(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error)
	GetGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error)
	DeleteGames(ctx context.Context, in *Games, opts ...grpc.CallOption) (*empty.Empty, error)
	AllocateGameSlots(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error)
	SetButtonPositions(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error)
	SetMin(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error)
	ValidatePreGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error)
	NextDealer(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error)
	UpdateGameInRound(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error)
	// GamePlayers (join table)
	GetGamePlayersByGameId(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Players, error)
	SetGamePlayers(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Players, error)
	RemovePlayerFromGame(ctx context.Context, in *Player, opts ...grpc.CallOption) (*empty.Empty, error)
	// RoundPlayers RPCs (join table)
	GetRoundPlayersByRoundId(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Players, error)
	CreateRoundPlayers(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error)
	// Round RPCs
	CreateRoundFromGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Round, error)
	GetRound(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error)
	ValidatePreRound(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error)
	StartRound(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error)
	DealCards(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error)
	UpdateDeck(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error)
	DealFlop(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error)
	DealRiver(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error)
	DealTurn(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error)
	CreateDeck(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error)
	SetAction(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error)
	SetNextOnBet(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error)
	SetNextRound(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error)
	UpdateRoundFlop(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error)
	UpdateRoundRiver(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error)
	UpdateRoundTurn(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error)
	GetRoundBets(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Bets, error)
	GetRoundBetsForStatus(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Bets, error)
	MakeBet(ctx context.Context, in *Bet, opts ...grpc.CallOption) (*Round, error)
	GetPlayerOnBet(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Player, error)
	UpdatePlayerNotinHand(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Player, error)
	GetAmountToCallForPlayer(ctx context.Context, in *AmountToCall, opts ...grpc.CallOption) (*AmountToCall, error)
	IsBettingOver(ctx context.Context, in *AmountToCall, opts ...grpc.CallOption) (*AmountToCall, error)
}

type pokerClient struct {
	cc *grpc.ClientConn
}

func NewPokerClient(cc *grpc.ClientConn) PokerClient {
	return &pokerClient{cc}
}

func (c *pokerClient) CreatePlayer(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Player, error) {
	out := new(Player)
	err := c.cc.Invoke(ctx, "/poker.Poker/CreatePlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) CreatePlayers(ctx context.Context, in *Players, opts ...grpc.CallOption) (*Players, error) {
	out := new(Players)
	err := c.cc.Invoke(ctx, "/poker.Poker/CreatePlayers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) DeletePlayers(ctx context.Context, in *Players, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/poker.Poker/DeletePlayers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) GetPlayer(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Player, error) {
	out := new(Player)
	err := c.cc.Invoke(ctx, "/poker.Poker/GetPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) GetPlayersByName(ctx context.Context, in *Players, opts ...grpc.CallOption) (*Players, error) {
	out := new(Players)
	err := c.cc.Invoke(ctx, "/poker.Poker/GetPlayersByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) UpdatePlayersChips(ctx context.Context, in *Players, opts ...grpc.CallOption) (*Players, error) {
	out := new(Players)
	err := c.cc.Invoke(ctx, "/poker.Poker/UpdatePlayersChips", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) UpdatePlayersCards(ctx context.Context, in *Players, opts ...grpc.CallOption) (*Players, error) {
	out := new(Players)
	err := c.cc.Invoke(ctx, "/poker.Poker/UpdatePlayersCards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) SetPlayerSlot(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Player, error) {
	out := new(Player)
	err := c.cc.Invoke(ctx, "/poker.Poker/SetPlayerSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) CreateGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/poker.Poker/CreateGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) GetGameByName(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/poker.Poker/GetGameByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) GetGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/poker.Poker/GetGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) DeleteGames(ctx context.Context, in *Games, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/poker.Poker/DeleteGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) AllocateGameSlots(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/poker.Poker/AllocateGameSlots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) SetButtonPositions(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/poker.Poker/SetButtonPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) SetMin(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/poker.Poker/SetMin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) ValidatePreGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/poker.Poker/ValidatePreGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) NextDealer(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/poker.Poker/NextDealer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) UpdateGameInRound(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/poker.Poker/UpdateGameInRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) GetGamePlayersByGameId(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Players, error) {
	out := new(Players)
	err := c.cc.Invoke(ctx, "/poker.Poker/GetGamePlayersByGameId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) SetGamePlayers(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Players, error) {
	out := new(Players)
	err := c.cc.Invoke(ctx, "/poker.Poker/SetGamePlayers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) RemovePlayerFromGame(ctx context.Context, in *Player, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/poker.Poker/RemovePlayerFromGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) GetRoundPlayersByRoundId(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Players, error) {
	out := new(Players)
	err := c.cc.Invoke(ctx, "/poker.Poker/GetRoundPlayersByRoundId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) CreateRoundPlayers(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error) {
	out := new(Round)
	err := c.cc.Invoke(ctx, "/poker.Poker/CreateRoundPlayers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) CreateRoundFromGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Round, error) {
	out := new(Round)
	err := c.cc.Invoke(ctx, "/poker.Poker/CreateRoundFromGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) GetRound(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error) {
	out := new(Round)
	err := c.cc.Invoke(ctx, "/poker.Poker/GetRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) ValidatePreRound(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error) {
	out := new(Round)
	err := c.cc.Invoke(ctx, "/poker.Poker/ValidatePreRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) StartRound(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error) {
	out := new(Round)
	err := c.cc.Invoke(ctx, "/poker.Poker/StartRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) DealCards(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error) {
	out := new(Round)
	err := c.cc.Invoke(ctx, "/poker.Poker/DealCards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) UpdateDeck(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error) {
	out := new(Round)
	err := c.cc.Invoke(ctx, "/poker.Poker/UpdateDeck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) DealFlop(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error) {
	out := new(Round)
	err := c.cc.Invoke(ctx, "/poker.Poker/DealFlop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) DealRiver(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error) {
	out := new(Round)
	err := c.cc.Invoke(ctx, "/poker.Poker/DealRiver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) DealTurn(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error) {
	out := new(Round)
	err := c.cc.Invoke(ctx, "/poker.Poker/DealTurn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) CreateDeck(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error) {
	out := new(Round)
	err := c.cc.Invoke(ctx, "/poker.Poker/CreateDeck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) SetAction(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error) {
	out := new(Round)
	err := c.cc.Invoke(ctx, "/poker.Poker/SetAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) SetNextOnBet(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error) {
	out := new(Round)
	err := c.cc.Invoke(ctx, "/poker.Poker/SetNextOnBet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) SetNextRound(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error) {
	out := new(Round)
	err := c.cc.Invoke(ctx, "/poker.Poker/SetNextRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) UpdateRoundFlop(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error) {
	out := new(Round)
	err := c.cc.Invoke(ctx, "/poker.Poker/UpdateRoundFlop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) UpdateRoundRiver(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error) {
	out := new(Round)
	err := c.cc.Invoke(ctx, "/poker.Poker/UpdateRoundRiver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) UpdateRoundTurn(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Round, error) {
	out := new(Round)
	err := c.cc.Invoke(ctx, "/poker.Poker/UpdateRoundTurn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) GetRoundBets(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Bets, error) {
	out := new(Bets)
	err := c.cc.Invoke(ctx, "/poker.Poker/GetRoundBets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) GetRoundBetsForStatus(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Bets, error) {
	out := new(Bets)
	err := c.cc.Invoke(ctx, "/poker.Poker/GetRoundBetsForStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) MakeBet(ctx context.Context, in *Bet, opts ...grpc.CallOption) (*Round, error) {
	out := new(Round)
	err := c.cc.Invoke(ctx, "/poker.Poker/MakeBet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) GetPlayerOnBet(ctx context.Context, in *Round, opts ...grpc.CallOption) (*Player, error) {
	out := new(Player)
	err := c.cc.Invoke(ctx, "/poker.Poker/GetPlayerOnBet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) UpdatePlayerNotinHand(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Player, error) {
	out := new(Player)
	err := c.cc.Invoke(ctx, "/poker.Poker/UpdatePlayerNotinHand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) GetAmountToCallForPlayer(ctx context.Context, in *AmountToCall, opts ...grpc.CallOption) (*AmountToCall, error) {
	out := new(AmountToCall)
	err := c.cc.Invoke(ctx, "/poker.Poker/GetAmountToCallForPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerClient) IsBettingOver(ctx context.Context, in *AmountToCall, opts ...grpc.CallOption) (*AmountToCall, error) {
	out := new(AmountToCall)
	err := c.cc.Invoke(ctx, "/poker.Poker/IsBettingOver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PokerServer is the server API for Poker service.
type PokerServer interface {
	// Player RPCs
	CreatePlayer(context.Context, *Player) (*Player, error)
	CreatePlayers(context.Context, *Players) (*Players, error)
	DeletePlayers(context.Context, *Players) (*empty.Empty, error)
	GetPlayer(context.Context, *Player) (*Player, error)
	GetPlayersByName(context.Context, *Players) (*Players, error)
	UpdatePlayersChips(context.Context, *Players) (*Players, error)
	UpdatePlayersCards(context.Context, *Players) (*Players, error)
	SetPlayerSlot(context.Context, *Player) (*Player, error)
	// Game RPCs
	CreateGame(context.Context, *Game) (*Game, error)
	GetGameByName(context.Context, *Game) (*Game, error)
	GetGame(context.Context, *Game) (*Game, error)
	DeleteGames(context.Context, *Games) (*empty.Empty, error)
	AllocateGameSlots(context.Context, *Game) (*Game, error)
	SetButtonPositions(context.Context, *Game) (*Game, error)
	SetMin(context.Context, *Game) (*Game, error)
	ValidatePreGame(context.Context, *Game) (*Game, error)
	NextDealer(context.Context, *Game) (*Game, error)
	UpdateGameInRound(context.Context, *Game) (*Game, error)
	// GamePlayers (join table)
	GetGamePlayersByGameId(context.Context, *Game) (*Players, error)
	SetGamePlayers(context.Context, *Game) (*Players, error)
	RemovePlayerFromGame(context.Context, *Player) (*empty.Empty, error)
	// RoundPlayers RPCs (join table)
	GetRoundPlayersByRoundId(context.Context, *Round) (*Players, error)
	CreateRoundPlayers(context.Context, *Round) (*Round, error)
	// Round RPCs
	CreateRoundFromGame(context.Context, *Game) (*Round, error)
	GetRound(context.Context, *Round) (*Round, error)
	ValidatePreRound(context.Context, *Round) (*Round, error)
	StartRound(context.Context, *Round) (*Round, error)
	DealCards(context.Context, *Round) (*Round, error)
	UpdateDeck(context.Context, *Round) (*Round, error)
	DealFlop(context.Context, *Round) (*Round, error)
	DealRiver(context.Context, *Round) (*Round, error)
	DealTurn(context.Context, *Round) (*Round, error)
	CreateDeck(context.Context, *Round) (*Round, error)
	SetAction(context.Context, *Round) (*Round, error)
	SetNextOnBet(context.Context, *Round) (*Round, error)
	SetNextRound(context.Context, *Round) (*Round, error)
	UpdateRoundFlop(context.Context, *Round) (*Round, error)
	UpdateRoundRiver(context.Context, *Round) (*Round, error)
	UpdateRoundTurn(context.Context, *Round) (*Round, error)
	GetRoundBets(context.Context, *Round) (*Bets, error)
	GetRoundBetsForStatus(context.Context, *Round) (*Bets, error)
	MakeBet(context.Context, *Bet) (*Round, error)
	GetPlayerOnBet(context.Context, *Round) (*Player, error)
	UpdatePlayerNotinHand(context.Context, *Player) (*Player, error)
	GetAmountToCallForPlayer(context.Context, *AmountToCall) (*AmountToCall, error)
	IsBettingOver(context.Context, *AmountToCall) (*AmountToCall, error)
}

// UnimplementedPokerServer can be embedded to have forward compatible implementations.
type UnimplementedPokerServer struct {
}

func (*UnimplementedPokerServer) CreatePlayer(ctx context.Context, req *Player) (*Player, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayer not implemented")
}
func (*UnimplementedPokerServer) CreatePlayers(ctx context.Context, req *Players) (*Players, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayers not implemented")
}
func (*UnimplementedPokerServer) DeletePlayers(ctx context.Context, req *Players) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlayers not implemented")
}
func (*UnimplementedPokerServer) GetPlayer(ctx context.Context, req *Player) (*Player, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayer not implemented")
}
func (*UnimplementedPokerServer) GetPlayersByName(ctx context.Context, req *Players) (*Players, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayersByName not implemented")
}
func (*UnimplementedPokerServer) UpdatePlayersChips(ctx context.Context, req *Players) (*Players, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlayersChips not implemented")
}
func (*UnimplementedPokerServer) UpdatePlayersCards(ctx context.Context, req *Players) (*Players, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlayersCards not implemented")
}
func (*UnimplementedPokerServer) SetPlayerSlot(ctx context.Context, req *Player) (*Player, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPlayerSlot not implemented")
}
func (*UnimplementedPokerServer) CreateGame(ctx context.Context, req *Game) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGame not implemented")
}
func (*UnimplementedPokerServer) GetGameByName(ctx context.Context, req *Game) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameByName not implemented")
}
func (*UnimplementedPokerServer) GetGame(ctx context.Context, req *Game) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGame not implemented")
}
func (*UnimplementedPokerServer) DeleteGames(ctx context.Context, req *Games) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGames not implemented")
}
func (*UnimplementedPokerServer) AllocateGameSlots(ctx context.Context, req *Game) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateGameSlots not implemented")
}
func (*UnimplementedPokerServer) SetButtonPositions(ctx context.Context, req *Game) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetButtonPositions not implemented")
}
func (*UnimplementedPokerServer) SetMin(ctx context.Context, req *Game) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMin not implemented")
}
func (*UnimplementedPokerServer) ValidatePreGame(ctx context.Context, req *Game) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePreGame not implemented")
}
func (*UnimplementedPokerServer) NextDealer(ctx context.Context, req *Game) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextDealer not implemented")
}
func (*UnimplementedPokerServer) UpdateGameInRound(ctx context.Context, req *Game) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGameInRound not implemented")
}
func (*UnimplementedPokerServer) GetGamePlayersByGameId(ctx context.Context, req *Game) (*Players, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGamePlayersByGameId not implemented")
}
func (*UnimplementedPokerServer) SetGamePlayers(ctx context.Context, req *Game) (*Players, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGamePlayers not implemented")
}
func (*UnimplementedPokerServer) RemovePlayerFromGame(ctx context.Context, req *Player) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePlayerFromGame not implemented")
}
func (*UnimplementedPokerServer) GetRoundPlayersByRoundId(ctx context.Context, req *Round) (*Players, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoundPlayersByRoundId not implemented")
}
func (*UnimplementedPokerServer) CreateRoundPlayers(ctx context.Context, req *Round) (*Round, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoundPlayers not implemented")
}
func (*UnimplementedPokerServer) CreateRoundFromGame(ctx context.Context, req *Game) (*Round, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoundFromGame not implemented")
}
func (*UnimplementedPokerServer) GetRound(ctx context.Context, req *Round) (*Round, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRound not implemented")
}
func (*UnimplementedPokerServer) ValidatePreRound(ctx context.Context, req *Round) (*Round, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePreRound not implemented")
}
func (*UnimplementedPokerServer) StartRound(ctx context.Context, req *Round) (*Round, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRound not implemented")
}
func (*UnimplementedPokerServer) DealCards(ctx context.Context, req *Round) (*Round, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DealCards not implemented")
}
func (*UnimplementedPokerServer) UpdateDeck(ctx context.Context, req *Round) (*Round, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeck not implemented")
}
func (*UnimplementedPokerServer) DealFlop(ctx context.Context, req *Round) (*Round, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DealFlop not implemented")
}
func (*UnimplementedPokerServer) DealRiver(ctx context.Context, req *Round) (*Round, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DealRiver not implemented")
}
func (*UnimplementedPokerServer) DealTurn(ctx context.Context, req *Round) (*Round, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DealTurn not implemented")
}
func (*UnimplementedPokerServer) CreateDeck(ctx context.Context, req *Round) (*Round, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeck not implemented")
}
func (*UnimplementedPokerServer) SetAction(ctx context.Context, req *Round) (*Round, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAction not implemented")
}
func (*UnimplementedPokerServer) SetNextOnBet(ctx context.Context, req *Round) (*Round, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNextOnBet not implemented")
}
func (*UnimplementedPokerServer) SetNextRound(ctx context.Context, req *Round) (*Round, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNextRound not implemented")
}
func (*UnimplementedPokerServer) UpdateRoundFlop(ctx context.Context, req *Round) (*Round, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoundFlop not implemented")
}
func (*UnimplementedPokerServer) UpdateRoundRiver(ctx context.Context, req *Round) (*Round, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoundRiver not implemented")
}
func (*UnimplementedPokerServer) UpdateRoundTurn(ctx context.Context, req *Round) (*Round, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoundTurn not implemented")
}
func (*UnimplementedPokerServer) GetRoundBets(ctx context.Context, req *Round) (*Bets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoundBets not implemented")
}
func (*UnimplementedPokerServer) GetRoundBetsForStatus(ctx context.Context, req *Round) (*Bets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoundBetsForStatus not implemented")
}
func (*UnimplementedPokerServer) MakeBet(ctx context.Context, req *Bet) (*Round, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeBet not implemented")
}
func (*UnimplementedPokerServer) GetPlayerOnBet(ctx context.Context, req *Round) (*Player, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerOnBet not implemented")
}
func (*UnimplementedPokerServer) UpdatePlayerNotinHand(ctx context.Context, req *Player) (*Player, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlayerNotinHand not implemented")
}
func (*UnimplementedPokerServer) GetAmountToCallForPlayer(ctx context.Context, req *AmountToCall) (*AmountToCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAmountToCallForPlayer not implemented")
}
func (*UnimplementedPokerServer) IsBettingOver(ctx context.Context, req *AmountToCall) (*AmountToCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsBettingOver not implemented")
}

func RegisterPokerServer(s *grpc.Server, srv PokerServer) {
	s.RegisterService(&_Poker_serviceDesc, srv)
}

func _Poker_CreatePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).CreatePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/CreatePlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).CreatePlayer(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_CreatePlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Players)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).CreatePlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/CreatePlayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).CreatePlayers(ctx, req.(*Players))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_DeletePlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Players)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).DeletePlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/DeletePlayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).DeletePlayers(ctx, req.(*Players))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_GetPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).GetPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/GetPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).GetPlayer(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_GetPlayersByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Players)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).GetPlayersByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/GetPlayersByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).GetPlayersByName(ctx, req.(*Players))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_UpdatePlayersChips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Players)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).UpdatePlayersChips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/UpdatePlayersChips",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).UpdatePlayersChips(ctx, req.(*Players))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_UpdatePlayersCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Players)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).UpdatePlayersCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/UpdatePlayersCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).UpdatePlayersCards(ctx, req.(*Players))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_SetPlayerSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).SetPlayerSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/SetPlayerSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).SetPlayerSlot(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).CreateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/CreateGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).CreateGame(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_GetGameByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).GetGameByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/GetGameByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).GetGameByName(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_GetGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).GetGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/GetGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).GetGame(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_DeleteGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Games)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).DeleteGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/DeleteGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).DeleteGames(ctx, req.(*Games))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_AllocateGameSlots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).AllocateGameSlots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/AllocateGameSlots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).AllocateGameSlots(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_SetButtonPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).SetButtonPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/SetButtonPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).SetButtonPositions(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_SetMin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).SetMin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/SetMin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).SetMin(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_ValidatePreGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).ValidatePreGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/ValidatePreGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).ValidatePreGame(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_NextDealer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).NextDealer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/NextDealer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).NextDealer(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_UpdateGameInRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).UpdateGameInRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/UpdateGameInRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).UpdateGameInRound(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_GetGamePlayersByGameId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).GetGamePlayersByGameId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/GetGamePlayersByGameId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).GetGamePlayersByGameId(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_SetGamePlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).SetGamePlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/SetGamePlayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).SetGamePlayers(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_RemovePlayerFromGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).RemovePlayerFromGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/RemovePlayerFromGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).RemovePlayerFromGame(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_GetRoundPlayersByRoundId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Round)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).GetRoundPlayersByRoundId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/GetRoundPlayersByRoundId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).GetRoundPlayersByRoundId(ctx, req.(*Round))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_CreateRoundPlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Round)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).CreateRoundPlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/CreateRoundPlayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).CreateRoundPlayers(ctx, req.(*Round))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_CreateRoundFromGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).CreateRoundFromGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/CreateRoundFromGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).CreateRoundFromGame(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_GetRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Round)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).GetRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/GetRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).GetRound(ctx, req.(*Round))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_ValidatePreRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Round)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).ValidatePreRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/ValidatePreRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).ValidatePreRound(ctx, req.(*Round))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_StartRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Round)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).StartRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/StartRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).StartRound(ctx, req.(*Round))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_DealCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Round)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).DealCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/DealCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).DealCards(ctx, req.(*Round))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_UpdateDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Round)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).UpdateDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/UpdateDeck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).UpdateDeck(ctx, req.(*Round))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_DealFlop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Round)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).DealFlop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/DealFlop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).DealFlop(ctx, req.(*Round))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_DealRiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Round)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).DealRiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/DealRiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).DealRiver(ctx, req.(*Round))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_DealTurn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Round)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).DealTurn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/DealTurn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).DealTurn(ctx, req.(*Round))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_CreateDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Round)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).CreateDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/CreateDeck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).CreateDeck(ctx, req.(*Round))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_SetAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Round)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).SetAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/SetAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).SetAction(ctx, req.(*Round))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_SetNextOnBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Round)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).SetNextOnBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/SetNextOnBet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).SetNextOnBet(ctx, req.(*Round))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_SetNextRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Round)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).SetNextRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/SetNextRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).SetNextRound(ctx, req.(*Round))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_UpdateRoundFlop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Round)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).UpdateRoundFlop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/UpdateRoundFlop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).UpdateRoundFlop(ctx, req.(*Round))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_UpdateRoundRiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Round)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).UpdateRoundRiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/UpdateRoundRiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).UpdateRoundRiver(ctx, req.(*Round))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_UpdateRoundTurn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Round)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).UpdateRoundTurn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/UpdateRoundTurn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).UpdateRoundTurn(ctx, req.(*Round))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_GetRoundBets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Round)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).GetRoundBets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/GetRoundBets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).GetRoundBets(ctx, req.(*Round))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_GetRoundBetsForStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Round)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).GetRoundBetsForStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/GetRoundBetsForStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).GetRoundBetsForStatus(ctx, req.(*Round))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_MakeBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).MakeBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/MakeBet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).MakeBet(ctx, req.(*Bet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_GetPlayerOnBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Round)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).GetPlayerOnBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/GetPlayerOnBet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).GetPlayerOnBet(ctx, req.(*Round))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_UpdatePlayerNotinHand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).UpdatePlayerNotinHand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/UpdatePlayerNotinHand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).UpdatePlayerNotinHand(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_GetAmountToCallForPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AmountToCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).GetAmountToCallForPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/GetAmountToCallForPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).GetAmountToCallForPlayer(ctx, req.(*AmountToCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poker_IsBettingOver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AmountToCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServer).IsBettingOver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.Poker/IsBettingOver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServer).IsBettingOver(ctx, req.(*AmountToCall))
	}
	return interceptor(ctx, in, info, handler)
}

var _Poker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "poker.Poker",
	HandlerType: (*PokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlayer",
			Handler:    _Poker_CreatePlayer_Handler,
		},
		{
			MethodName: "CreatePlayers",
			Handler:    _Poker_CreatePlayers_Handler,
		},
		{
			MethodName: "DeletePlayers",
			Handler:    _Poker_DeletePlayers_Handler,
		},
		{
			MethodName: "GetPlayer",
			Handler:    _Poker_GetPlayer_Handler,
		},
		{
			MethodName: "GetPlayersByName",
			Handler:    _Poker_GetPlayersByName_Handler,
		},
		{
			MethodName: "UpdatePlayersChips",
			Handler:    _Poker_UpdatePlayersChips_Handler,
		},
		{
			MethodName: "UpdatePlayersCards",
			Handler:    _Poker_UpdatePlayersCards_Handler,
		},
		{
			MethodName: "SetPlayerSlot",
			Handler:    _Poker_SetPlayerSlot_Handler,
		},
		{
			MethodName: "CreateGame",
			Handler:    _Poker_CreateGame_Handler,
		},
		{
			MethodName: "GetGameByName",
			Handler:    _Poker_GetGameByName_Handler,
		},
		{
			MethodName: "GetGame",
			Handler:    _Poker_GetGame_Handler,
		},
		{
			MethodName: "DeleteGames",
			Handler:    _Poker_DeleteGames_Handler,
		},
		{
			MethodName: "AllocateGameSlots",
			Handler:    _Poker_AllocateGameSlots_Handler,
		},
		{
			MethodName: "SetButtonPositions",
			Handler:    _Poker_SetButtonPositions_Handler,
		},
		{
			MethodName: "SetMin",
			Handler:    _Poker_SetMin_Handler,
		},
		{
			MethodName: "ValidatePreGame",
			Handler:    _Poker_ValidatePreGame_Handler,
		},
		{
			MethodName: "NextDealer",
			Handler:    _Poker_NextDealer_Handler,
		},
		{
			MethodName: "UpdateGameInRound",
			Handler:    _Poker_UpdateGameInRound_Handler,
		},
		{
			MethodName: "GetGamePlayersByGameId",
			Handler:    _Poker_GetGamePlayersByGameId_Handler,
		},
		{
			MethodName: "SetGamePlayers",
			Handler:    _Poker_SetGamePlayers_Handler,
		},
		{
			MethodName: "RemovePlayerFromGame",
			Handler:    _Poker_RemovePlayerFromGame_Handler,
		},
		{
			MethodName: "GetRoundPlayersByRoundId",
			Handler:    _Poker_GetRoundPlayersByRoundId_Handler,
		},
		{
			MethodName: "CreateRoundPlayers",
			Handler:    _Poker_CreateRoundPlayers_Handler,
		},
		{
			MethodName: "CreateRoundFromGame",
			Handler:    _Poker_CreateRoundFromGame_Handler,
		},
		{
			MethodName: "GetRound",
			Handler:    _Poker_GetRound_Handler,
		},
		{
			MethodName: "ValidatePreRound",
			Handler:    _Poker_ValidatePreRound_Handler,
		},
		{
			MethodName: "StartRound",
			Handler:    _Poker_StartRound_Handler,
		},
		{
			MethodName: "DealCards",
			Handler:    _Poker_DealCards_Handler,
		},
		{
			MethodName: "UpdateDeck",
			Handler:    _Poker_UpdateDeck_Handler,
		},
		{
			MethodName: "DealFlop",
			Handler:    _Poker_DealFlop_Handler,
		},
		{
			MethodName: "DealRiver",
			Handler:    _Poker_DealRiver_Handler,
		},
		{
			MethodName: "DealTurn",
			Handler:    _Poker_DealTurn_Handler,
		},
		{
			MethodName: "CreateDeck",
			Handler:    _Poker_CreateDeck_Handler,
		},
		{
			MethodName: "SetAction",
			Handler:    _Poker_SetAction_Handler,
		},
		{
			MethodName: "SetNextOnBet",
			Handler:    _Poker_SetNextOnBet_Handler,
		},
		{
			MethodName: "SetNextRound",
			Handler:    _Poker_SetNextRound_Handler,
		},
		{
			MethodName: "UpdateRoundFlop",
			Handler:    _Poker_UpdateRoundFlop_Handler,
		},
		{
			MethodName: "UpdateRoundRiver",
			Handler:    _Poker_UpdateRoundRiver_Handler,
		},
		{
			MethodName: "UpdateRoundTurn",
			Handler:    _Poker_UpdateRoundTurn_Handler,
		},
		{
			MethodName: "GetRoundBets",
			Handler:    _Poker_GetRoundBets_Handler,
		},
		{
			MethodName: "GetRoundBetsForStatus",
			Handler:    _Poker_GetRoundBetsForStatus_Handler,
		},
		{
			MethodName: "MakeBet",
			Handler:    _Poker_MakeBet_Handler,
		},
		{
			MethodName: "GetPlayerOnBet",
			Handler:    _Poker_GetPlayerOnBet_Handler,
		},
		{
			MethodName: "UpdatePlayerNotinHand",
			Handler:    _Poker_UpdatePlayerNotinHand_Handler,
		},
		{
			MethodName: "GetAmountToCallForPlayer",
			Handler:    _Poker_GetAmountToCallForPlayer_Handler,
		},
		{
			MethodName: "IsBettingOver",
			Handler:    _Poker_IsBettingOver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobufs/poker.proto",
}
